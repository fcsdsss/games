if not game:IsLoaded() then
    game.Loaded:Wait()
end

if not syn or not protectgui then
    getgenv().protectgui = function() end
end

local SilentAimSettings = {
    Enabled = false,
    ClassName = "Universal Silent Aim - Averiias, Stefanuk12, xaxa",
    ToggleKey = "RightAlt",
    TeamCheck = false,
    VisibleCheck = false,
    Penetration = false,
    TargetPart = "HumanoidRootPart",
    SilentAimMethod = "Raycast",
    FOVRadius = 130,
    FOVVisible = true,
    ShowSilentAimTarget = false,
    ShowTracer = false,
    MouseHitPrediction = false,
    MouseHitPredictionAmount = 0.165,
    HitChance = 100,
    FixedFOV = true,
    TargetIndicatorRadius = 20,
    MaxDistance = 500,
    Tracer_Y_Offset = 0
}

getgenv().SilentAimSettings = SilentAimSettings
local MainFileName = "UniversalSilentAim"
local SelectedFile, FileToSave = "", ""

local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local GetChildren = game.GetChildren
local GetPlayers = Players.GetPlayers
local WorldToViewportPoint = Camera.WorldToViewportPoint
local GetPartsObscuringTarget = Camera.GetPartsObscuringTarget
local FindFirstChild = game.FindFirstChild
local RenderStepped = RunService.RenderStepped
local GuiInset = GuiService.GetGuiInset
local GetMouseLocation = UserInputService.GetMouseLocation

local resume = coroutine.resume
local create = coroutine.create

local ValidTargetParts = {"Head", "HumanoidRootPart"}
local PredictionAmount = 0.165

local currentTargetPart = nil

local target_indicator = Drawing.new("Circle")
target_indicator.Visible = false
target_indicator.ZIndex = 1000
target_indicator.Color = Color3.fromRGB(255, 0, 0)
target_indicator.Thickness = 2
target_indicator.Radius = 20
target_indicator.Filled = false

local distance_text = Drawing.new("Text")
distance_text.Visible = false
distance_text.ZIndex = 1001
distance_text.Font = Drawing.Fonts.Plex
distance_text.Size = 14
distance_text.Color = Color3.fromRGB(255, 255, 255)
distance_text.Center = true
distance_text.Outline = true

local tracer_line = Drawing.new("Line")
tracer_line.Visible = false
tracer_line.ZIndex = 998
tracer_line.Color = Color3.fromRGB(255, 255, 0)
tracer_line.Thickness = 1
tracer_line.Transparency = 1

local FOVCircleGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
FOVCircleGui.Name = "FOVCircleGui"
FOVCircleGui.ResetOnSpawn = false
FOVCircleGui.IgnoreGuiInset = true
FOVCircleGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local FOVCircleFrame = Instance.new("Frame", FOVCircleGui)
FOVCircleFrame.Name = "FOVCircleFrame"
FOVCircleFrame.AnchorPoint = Vector2.new(0.5, 0.5)
FOVCircleFrame.Position = UDim2.fromScale(0.5, 0.5)
FOVCircleFrame.BackgroundTransparency = 1

local FOVStroke = Instance.new("UIStroke", FOVCircleFrame)
FOVStroke.Name = "FOVStroke"
FOVStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
FOVStroke.Thickness = 1
FOVStroke.Transparency = 0.5

local FOVCorner = Instance.new("UICorner", FOVCircleFrame)
FOVCorner.Name = "FOVCorner"
FOVCorner.CornerRadius = UDim.new(1, 0)

local ExpectedArguments = {
    FindPartOnRayWithIgnoreList = { ArgCountRequired = 3, Args = {"Instance", "Ray", "table", "boolean", "boolean"} },
    FindPartOnRayWithWhitelist = { ArgCountRequired = 3, Args = {"Instance", "Ray", "table", "boolean"} },
    FindPartOnRay = { ArgCountRequired = 2, Args = {"Instance", "Ray", "Instance", "boolean", "boolean"} },
    Raycast = { ArgCountRequired = 3, Args = {"Instance", "Vector3", "Vector3", "RaycastParams"} }
}

function CalculateChance(Percentage)
    Percentage = math.floor(Percentage)
    local chance = math.floor(Random.new().NextNumber(Random.new(), 0, 1) * 100) / 100
    return chance <= Percentage / 100
end

do
    if not isfolder(MainFileName) then
        makefolder(MainFileName);
    end

    if not isfolder(string.format("%s/%s", MainFileName, tostring(game.PlaceId))) then
        makefolder(string.format("%s/%s", MainFileName, tostring(game.PlaceId)))
    end
end

local function getPositionOnScreen(Vector)
    local Vec3, OnScreen = WorldToViewportPoint(Camera, Vector)
    return Vector2.new(Vec3.X, Vec3.Y), OnScreen
end

local function ValidateArguments(Args, RayMethod)
    local Matches = 0
    if #Args < RayMethod.ArgCountRequired then return false end
    for Pos, Argument in next, Args do
        if typeof(Argument) == RayMethod.Args[Pos] then Matches = Matches + 1 end
    end
    return Matches >= RayMethod.ArgCountRequired
end

local function getDirection(Origin, Position)
    return (Position - Origin).Unit * 1000
end

local function getMousePosition()
    return GetMouseLocation(UserInputService)
end

local function IsPlayerVisible(Player)
    local localCharacter = LocalPlayer.Character
    local targetCharacter = Player.Character

    if not (localCharacter and targetCharacter) then
        return false
    end

    local targetPartName = SilentAimSettings.TargetPart
    if targetPartName == "Random" then
        targetPartName = "HumanoidRootPart"
    end
    local targetPart = targetCharacter:FindFirstChild(targetPartName) or targetCharacter:FindFirstChild("HumanoidRootPart")

    if not targetPart then
        return false
    end

    local cameraPosition = Camera.CFrame.Position
    local direction = targetPart.Position - cameraPosition

    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Exclude
    raycastParams.FilterDescendantsInstances = {localCharacter}

    local raycastResult = workspace:Raycast(cameraPosition, direction.Unit * (direction.Magnitude + 5), raycastParams)

    if not raycastResult or raycastResult.Instance:IsDescendantOf(targetCharacter) then
        return true
    end

    return false
end

local function getClosestPlayer()
    local Closest = nil
    local DistanceToAimPoint = SilentAimSettings.FOVRadius
    local AimPoint
    local LocalPlayerCharacter = LocalPlayer.Character
    if not LocalPlayerCharacter then return nil end
    local localRoot = FindFirstChild(LocalPlayerCharacter, "HumanoidRootPart")
    if not localRoot then return nil end

    if SilentAimSettings.FixedFOV then
        AimPoint = Camera.ViewportSize / 2
    else
        AimPoint = getMousePosition()
    end

    for _, Player in next, GetPlayers(Players) do
        if Player ~= LocalPlayer and not (SilentAimSettings.TeamCheck and Player.Team == LocalPlayer.Team) then
            local Character = Player.Character
            local targetRoot = Character and FindFirstChild(Character, "HumanoidRootPart")

            if Character and targetRoot then
                if SilentAimSettings.VisibleCheck and not SilentAimSettings.Penetration and not IsPlayerVisible(Player) then
                    continue
                end

                local distance = (localRoot.Position - targetRoot.Position).Magnitude
                if distance <= SilentAimSettings.MaxDistance then

                    local Humanoid = FindFirstChild(Character, "Humanoid")
                    if Humanoid and Humanoid.Health > 0 then
                        local TargetPartName = SilentAimSettings.TargetPart
                        local PartToAim = FindFirstChild(Character, TargetPartName)
                        if TargetPartName == "Random" then
                            PartToAim = Character[ValidTargetParts[math.random(1, #ValidTargetParts)]]
                        end
                        if PartToAim then
                            local ScreenPosition, OnScreen = getPositionOnScreen(PartToAim.Position)
                            if OnScreen then
                                local FovDistance = (AimPoint - ScreenPosition).Magnitude
                                if FovDistance <= DistanceToAimPoint then
                                    Closest = PartToAim
                                    DistanceToAimPoint = FovDistance
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return Closest
end

local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

local Window = Library:CreateWindow({
    Title = "Universal Silent Aim",
    Footer = "v2版本改自vapev4",
    Center = true,
    AutoShow = true
})

local Tabs = {
    Main = Window:AddTab("Main", "user"),
    ["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local MainGroupBox = Tabs.Main:AddLeftGroupbox("Main Settings", "boxes")

MainGroupBox:AddToggle("EnabledToggle", { Text = "Enabled", Default = SilentAimSettings.Enabled, }):AddKeyPicker("EnabledKeybind", { Default = SilentAimSettings.ToggleKey, SyncToggleState = true, Mode = "Toggle" })
Toggles.EnabledToggle:OnChanged(function(Value) SilentAimSettings.Enabled = Value end)

MainGroupBox:AddToggle("TeamCheckToggle", { Text = "Team Check", Default = SilentAimSettings.TeamCheck, })
Toggles.TeamCheckToggle:OnChanged(function(Value) SilentAimSettings.TeamCheck = Value end)

MainGroupBox:AddToggle("VisibleCheckToggle", { Text = "Visible Check", Default = SilentAimSettings.VisibleCheck, Tooltip = "Automatically disabled when Penetration is on." })
Toggles.VisibleCheckToggle:OnChanged(function(Value) if not SilentAimSettings.Penetration then SilentAimSettings.VisibleCheck = Value end end)

MainGroupBox:AddToggle("PenetrationToggle", { Text = "Bullet Penetration", Default = SilentAimSettings.Penetration, Tooltip = "Allows all methods to shoot through walls."})
Toggles.PenetrationToggle:OnChanged(function(Value) 
    SilentAimSettings.Penetration = Value 
    Toggles.VisibleCheckToggle:SetDisabled(Value)
    if Value then
        Toggles.VisibleCheckToggle:SetValue(false)
        SilentAimSettings.VisibleCheck = false
    end
end)

MainGroupBox:AddDropdown("TargetPartDropdown", { Values = {"Head", "HumanoidRootPart", "Random"}, Default = SilentAimSettings.TargetPart, Text = "Target Part", })
Options.TargetPartDropdown:OnChanged(function(Value) SilentAimSettings.TargetPart = Value end)

MainGroupBox:AddDropdown("MethodDropdown", { Text = "Silent Aim Method", Default = SilentAimSettings.SilentAimMethod, Values = { "Raycast","FindPartOnRay", "FindPartOnRayWithWhitelist", "FindPartOnRayWithIgnoreList", "ScreenPointToRay", "ViewportPointToRay", "Ray", "Mouse.Hit/Target" } })
Options.MethodDropdown:OnChanged(function(Value) SilentAimSettings.SilentAimMethod = Value end)

MainGroupBox:AddSlider('HitChanceSlider', { Text = 'Hit chance', Default = SilentAimSettings.HitChance, Min = 0, Max = 100, Rounding = 1, Suffix = "%" })
Options.HitChanceSlider:OnChanged(function(Value) SilentAimSettings.HitChance = Value end)

MainGroupBox:AddSlider('MaxDistanceSlider', { Text = 'Max Distance', Default = SilentAimSettings.MaxDistance, Min = 10, Max = 2000, Rounding = 0, Suffix = "studs" })
Options.MaxDistanceSlider:OnChanged(function(Value) SilentAimSettings.MaxDistance = Value end)

local VisualsGroupBox = Tabs.Main:AddRightGroupbox("Visuals")

VisualsGroupBox:AddToggle("FOVVisibleToggle", { Text = "Show FOV Circle", Default = SilentAimSettings.FOVVisible, }):AddColorPicker("FOVColorPicker", { Default = Color3.fromRGB(54, 57, 241), Title = "FOV Circle Color" })
Toggles.FOVVisibleToggle:OnChanged(function(Value) FOVCircleGui.Enabled = Value; SilentAimSettings.FOVVisible = Value end)
Options.FOVColorPicker:OnChanged(function(Value) FOVStroke.Color = Value end)

VisualsGroupBox:AddSlider("FOVRadiusSlider", { Text = "FOV Circle Radius", Min = 10, Max = 1000, Default = SilentAimSettings.FOVRadius, Rounding = 0 })
Options.FOVRadiusSlider:OnChanged(function(Value) FOVCircleFrame.Size = UDim2.fromOffset(Value * 2, Value * 2); SilentAimSettings.FOVRadius = Value end)

VisualsGroupBox:AddToggle("FixedFOVToggle", { Text = "Fixed FOV (for Mobile)", Default = SilentAimSettings.FixedFOV, })
Toggles.FixedFOVToggle:OnChanged(function(Value) SilentAimSettings.FixedFOV = Value end)

VisualsGroupBox:AddToggle("ShowTargetToggle", { Text = "Show Target Indicator", Default = SilentAimSettings.ShowSilentAimTarget, }):AddColorPicker("TargetIndicatorColorPicker", { Default = target_indicator.Color, Title = "Target Indicator Color" })
Toggles.ShowTargetToggle:OnChanged(function(Value) SilentAimSettings.ShowSilentAimTarget = Value end)
Options.TargetIndicatorColorPicker:OnChanged(function(Value) target_indicator.Color = Value end)

VisualsGroupBox:AddSlider("TargetIndicatorRadiusSlider", { Text = "Indicator Size", Min = 5, Max = 50, Default = SilentAim
