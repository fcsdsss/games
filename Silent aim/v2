local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local Options = Library.Options
local Toggles = Library.Toggles

local Window = Library:CreateWindow({
	Title = "mspaint",
	Footer = "version: functional",
	Icon = 95816097006870,
	NotifySide = "Right",
	ShowCustomCursor = true,
})

local Tabs = {
	Main = Window:AddTab("Main", "user"),
	["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

local GunModGroupBox = Tabs.Main:AddLeftGroupbox("Gun Mods")

GunModGroupBox:AddToggle("InstantReload", { Text = "Instant Reload", Tooltip = "Instantly reloads your weapon.", Default = false })
GunModGroupBox:AddToggle("InfiniteAmmo", { Text = "Infinite Ammo", Tooltip = "Gives you infinite ammunition.", Default = false })
GunModGroupBox:AddToggle("NoRecoil", { Text = "No Recoil", Tooltip = "Removes all weapon recoil.", Default = false })
GunModGroupBox:AddToggle("NoSpread", { Text = "No Spread", Tooltip = "Removes all weapon spread.", Default = false })
GunModGroupBox:AddToggle("FastShoot", { Text = "Fast Shoot", Tooltip = "Maximizes the rate of fire.", Default = false })

RunService.RenderStepped:Connect(function()
    pcall(function()
        local character = LocalPlayer.Character
        if not character then return end
        local gun = character:FindFirstChild(LocalPlayer.Name .. "CustomGun") or character:FindFirstChildOfClass("Tool")
        if not gun then return end
        if Toggles.InstantReload and Toggles.InstantReload.Value then gun:SetAttribute("reloadTime", 0) end
        if Toggles.InfiniteAmmo and Toggles.InfiniteAmmo.Value then gun:SetAttribute("magazineSize", math.huge) end
        if Toggles.NoRecoil and Toggles.NoRecoil.Value then
            gun:SetAttribute("recoilMin", Vector2.new(0, 0))
            gun:SetAttribute("recoilMax", Vector2.new(0, 0))
            gun:SetAttribute("recoilAimReduction", Vector2.new(0, 0))
        end
        if Toggles.NoSpread and Toggles.NoSpread.Value then gun:SetAttribute("spread", 0) end
        if Toggles.FastShoot and Toggles.FastShoot.Value then gun:SetAttribute("rateOfFire", math.huge) end
    end)
end)

local AimbotBox = Tabs.Main:AddRightGroupbox("Aimbot")
local ShootEvent = ReplicatedStorage:WaitForChild("Events"):WaitForChild("Shoot")
local firing = false

local FOVCircleGui = Instance.new("ScreenGui", LocalPlayer:WaitForChild("PlayerGui"))
FOVCircleGui.Name = "FOVCircleGui"
FOVCircleGui.ResetOnSpawn = false
FOVCircleGui.IgnoreGuiInset = true
FOVCircleGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local FOVCircleFrame = Instance.new("Frame", FOVCircleGui)
FOVCircleFrame.Name = "FOVCircleFrame"
FOVCircleFrame.AnchorPoint = Vector2.new(0.5, 0.5)
FOVCircleFrame.Position = UDim2.fromScale(0.5, 0.5)
FOVCircleFrame.BackgroundTransparency = 1

local FOVStroke = Instance.new("UIStroke", FOVCircleFrame)
FOVStroke.Name = "FOVStroke"
FOVStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
FOVStroke.Thickness = 1
FOVStroke.Transparency = 0.5

local FOVCorner = Instance.new("UICorner", FOVCircleFrame)
FOVCorner.Name = "FOVCorner"
FOVCorner.CornerRadius = UDim.new(1, 0)

AimbotBox:AddToggle("SilentAimbotEnabled", { Text = "Enable Silent Aimbot", Default = false })
AimbotBox:AddToggle("KillAuraEnabled", { Text = "Enable Kill Aura", Tooltip = "Overrides Silent Aimbot. Attacks all enemies on the map.", Default = false })
AimbotBox:AddToggle("ShowFOV", { Text = "Show FOV", Default = true, Callback = function(v) FOVCircleGui.Enabled = v end })
AimbotBox:AddSlider("FOVCircleRadius", { Text = "FOV Radius", Default = 90, Min = 10, Max = 500, Rounding = 0, Callback = function(v) FOVCircleFrame.Size = UDim2.fromOffset(v * 2, v * 2) end })
AimbotBox:AddColorPicker("FOVColor", { Default = Color3.fromRGB(255, 0, 0), Title = "FOV Color", Callback = function(v) FOVStroke.Color = v end })

FOVCircleGui.Enabled = Toggles.ShowFOV.Value
FOVCircleFrame.Size = UDim2.fromOffset(Options.FOVCircleRadius.Value * 2, Options.FOVCircleRadius.Value * 2)
FOVStroke.Color = Options.FOVColor.Value

UserInputService.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then firing = true end end)
UserInputService.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then firing = false end end)

local function isEnemy(p)
	return p and p ~= LocalPlayer and p.Team ~= LocalPlayer.Team and not p.Neutral and not LocalPlayer.Neutral
end

local function getTargets()
	local targets = {}
	local fovRadius = Options.FOVCircleRadius.Value
	local viewportCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
    local useKillAura = Toggles.KillAuraEnabled and Toggles.KillAuraEnabled.Value

	for _, p in ipairs(Players:GetPlayers()) do
		if isEnemy(p) and p.Character then
			local c = p.Character
			local h = c:FindFirstChild("Humanoid")
			local head = c:FindFirstChild("Head")
			if h and head and h.Health > 0 then
                if useKillAura then
                    table.insert(targets, {hum = h, part = head})
                else
				    local scrPos, visible = Camera:WorldToViewportPoint(head.Position)
				    if visible then
					    local dist = (viewportCenter - Vector2.new(scrPos.X, scrPos.Y)).Magnitude
					    if dist <= fovRadius then
						    table.insert(targets, {hum = h, part = head})
					    end
				    end
                end
			end
		end
	end
	return targets
end

RunService.RenderStepped:Connect(function()
    local silentAimActive = Toggles.SilentAimbotEnabled and Toggles.SilentAimbotEnabled.Value
    local killAuraActive = Toggles.KillAuraEnabled and Toggles.KillAuraEnabled.Value

	if not (silentAimActive or killAuraActive) or not firing then return end

	local char = LocalPlayer.Character
	if not char then return end

	local tool = char:FindFirstChildOfClass("Tool")
	if not tool then return end
	
	local targets = getTargets()
	for _, tgt in ipairs(targets) do
		local pos = tgt.part.Position
		local dir = (pos - Camera.CFrame.Position).Unit
		local cf = CFrame.new(Camera.CFrame.Position, pos)

		local args = {
			os.clock(),
			tool,
			cf,
			false,
			{
				["1"] = {
					tgt.hum,
					false,
					true,
					100
				}
			}
		}
		ShootEvent:FireServer(unpack(args))
	end
end)


local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")
MenuGroup:AddToggle("KeybindMenuOpen", { Default = Library.KeybindFrame.Visible, Text = "Open Keybind Menu", Callback = function(v) Library.KeybindFrame.Visible = v end })
MenuGroup:AddToggle("ShowCustomCursor", { Text = "Custom Cursor", Default = true, Callback = function(v) Library.ShowCustomCursor = v end })
MenuGroup:AddDropdown("NotificationSide", { Values = { "Left", "Right" }, Default = "Right", Text = "Notification Side", Callback = function(v) Library:SetNotifySide(v) end })
MenuGroup:AddDropdown("DPIDropdown", { Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" }, Default = "100%", Text = "DPI Scale",
	Callback = function(Value)
		local DPI = tonumber(Value:gsub("%%", ""))
		Library:SetDPIScale(DPI)
	end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })
Library.ToggleKeybind = Options.MenuKeybind
MenuGroup:AddButton("Unload", function() Library:Unload() end)
Library:OnUnload(function()
    FOVCircleGui:Destroy()
	print("Unloaded!")
end)

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()
