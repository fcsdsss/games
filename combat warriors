--[[
    Obsidian (LinoriaLib) & Infernium Feature Integration
    - Combat features (Hitbox, Anti-Ragdoll, Auto-Parry) by voltrivax
    - UI framework (Obsidian/LinoriaLib) by deivid & mstudio45
    - Integrated, translated, and cleaned by Gemini
]]

-- Game Services and Core Variables
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")
local hum = char:FindFirstChildWhichIsA("Humanoid")
local mouse = player:GetMouse()

-- Wait for the folder containing player characters
local charsFolder = Workspace:WaitForChild("PlayerCharacters", 20)

-- Load Obsidian Library
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

-- Create the main window
local Window = Library:CreateWindow({
	Title = "Obsidian (Integrated)",
	Footer = "Version: 2.0",
	Icon = 95816097006870,
	NotifySide = "Right",
	ShowCustomCursor = true,
})

-- UI Tabs
local Tabs = {
	Main = Window:AddTab("Main", "home"),
    Combat = Window:AddTab("Combat", "swords"), -- Combat features tab
	["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}


-- ###################################################################################
-- #
-- #                         COMBAT FEATURES (Ported from Infernium)
-- #
-- ###################################################################################

-- Feature-specific variables
local combatVars = {
    HitboxEnabled = false,
    HitboxSize = 4,
    HitboxTransparency = 0.7,
    HitboxColor = Color3.fromRGB(255, 0, 0),

    ParryEnabled = false,
    ParryEquip = false,
    ParryKey = Enum.KeyCode.F,

    isAntiRagdollEnabled = false,
    hasScannedGC = false,
}

local parrySettings = {
    Range = 13,
    Prediction = 4,
    Chance = 100,
}

-- In-memory game objects (for Anti-Ragdoll, etc.)
local gameGc = {
    OldRagdoll = nil,
    RagdollTable = nil,
}

-- Connection management
local conns = {
    ParryCheck = nil,
    CharactersAdded = nil,
    CharactersRemoved = nil,
}

local parryTargets = {}

-- ## Helper Functions ##

-- Scans game memory to find specific functions for hooking
local function scanGarbageCollector()
    if combatVars.hasScannedGC then return end
    combatVars.hasScannedGC = true
    for _, v in ipairs(getgc(true)) do
        if typeof(v) == "table" then
            if rawget(v, "toggleRagdoll") then
                gameGc.OldRagdoll = v.toggleRagdoll
                gameGc.RagdollTable = v
                print("Ragdoll function found and stored.")
            end
        end
    end
end

-- Simulates a key press event
local function keyPress(key)
    VirtualInputManager:SendKeyEvent(true, key, false, game)
    task.wait()
    VirtualInputManager:SendKeyEvent(false, key, false, game)
end

-- Hitbox modification function
local function resizeHitbox(otherChar, size, transparency, color)
    local head = otherChar:FindFirstChild("Head")
    if not head then return end

    -- The visual hitbox part
    local showHitboxPart = head:FindFirstChild("__ShowHitboxPart")
    if not showHitboxPart then
        showHitboxPart = Instance.new("Part")
        showHitboxPart.Name = "__ShowHitboxPart"
        showHitboxPart.Material = Enum.Material.Neon
        showHitboxPart.Anchored = true
        showHitboxPart.Parent = head

        -- Use a WeldConstraint for a stable connection
        local weld = Instance.new("WeldConstraint")
        weld.Part0 = head
        weld.Part1 = showHitboxPart
        weld.Parent = showHitboxPart
    end

    -- Apply visual properties
    showHitboxPart.Size = size
    showHitboxPart.Color = color
    showHitboxPart.Transparency = combatVars.HitboxEnabled and transparency or 1
    
    -- Ensure collision is ALWAYS disabled for the hitbox part
    showHitboxPart.CanCollide = false
    showHitboxPart.CanTouch = false
end

-- Applies hitbox changes to all players
local function applyHitboxToAll()
    local size = combatVars.HitboxEnabled and Vector3.new(combatVars.HitboxSize, combatVars.HitboxSize, combatVars.HitboxSize) or Vector3.new(2, 1, 1)
    local transparency = combatVars.HitboxTransparency
    local color = combatVars.HitboxColor
    
    for _, otherChar in ipairs(charsFolder:GetChildren()) do
        if otherChar.Name ~= player.Name then
            resizeHitbox(otherChar, size, transparency, color)
        end
    end
end

-- Auto-Parry functions
local function removeParryTarget(otherChar)
    if parryTargets[otherChar] then
        if typeof(parryTargets[otherChar]) == "RBXScriptConnection" then
            parryTargets[otherChar]:Disconnect()
        end
        parryTargets[otherChar] = nil
    end
end

local function findTool(otherChar)
    local charTool = otherChar:FindFirstChildWhichIsA("Tool")
    if charTool and charTool:FindFirstChild("Hitboxes") then
        return charTool, true
    end

    local itemsAttached = otherChar:FindFirstChild("ItemsAttached")
    if itemsAttached then
        local model = itemsAttached:FindFirstChildWhichIsA("Model")
        if model and model:FindFirstChildWhichIsA("ObjectValue") then
            return model:FindFirstChildWhichIsA("ObjectValue").Value, false
        end
    end
    return nil, false
end

local function getPredictedPosition(otherChar)
    local otherHrp = otherChar.HumanoidRootPart
    local humanoid = otherChar:FindFirstChild("Humanoid")
    local moveDirection = humanoid.MoveDirection

    if moveDirection.Magnitude == 0 then
        return otherHrp.Position
    else
        moveDirection = Vector3.new(moveDirection.X, 0, moveDirection.Z).Unit
        return otherHrp.Position + (moveDirection * parrySettings.Prediction)
    end
end

local function executeParry(otherChar)
    if not (math.random(1, 100) <= parrySettings.Chance) then return end
    
    local predictedPos = getPredictedPosition(otherChar)
    local distance = (predictedPos - hrp.Position).Magnitude

    if distance <= parrySettings.Range then
        if combatVars.ParryEquip then
            local myTool, isEquipped = findTool(char)
            if not isEquipped and myTool then
                hum:EquipTool(myTool)
                task.wait(0.1) -- Wait for equip animation
            end
        end
        keyPress(combatVars.ParryKey)
    end
end


-- ## UI Creation & Logic Binding ##

-- A clean Main tab for future additions
Tabs.Main:AddLabel({Text = "Welcome to Obsidian (Integrated)!\nCombat features are in the 'Combat' tab."})

-- ## Anti-Ragdoll ##
local PlayerGroup = Tabs.Combat:AddLeftGroupbox("Player", "user-cog")
PlayerGroup:AddToggle("AntiRagdoll", {
	Text = "Anti-Ragdoll",
	Tooltip = "Prevents your character from entering a ragdoll state.",
	Default = combatVars.isAntiRagdollEnabled,
	Callback = function(Value)
        combatVars.isAntiRagdollEnabled = Value
		scanGarbageCollector() -- Ensure GC has been scanned
		if gameGc.RagdollTable and gameGc.OldRagdoll then
			if Value then
				gameGc.RagdollTable.toggleRagdoll = function() return end
			else
				gameGc.RagdollTable.toggleRagdoll = gameGc.OldRagdoll
			end
		else
			Library:Notify({Title = "Error", Description = "Ragdoll function not found. This feature may be incompatible."})
		end
	end,
})

-- ## Hitbox Extender ##
local HitboxGroup = Tabs.Combat:AddLeftGroupbox("Hitbox", "expand")
HitboxGroup:AddToggle("HitboxExtender", {
	Text = "Enable Hitbox Extender",
	Tooltip = "Increases the visual hitbox of other players. No collision.",
	Default = false,
	Risky = true,
	Callback = function(Value)
		combatVars.HitboxEnabled = Value
        applyHitboxToAll()
	end,
})

HitboxGroup:AddSlider("HitboxSize", {
	Text = "Hitbox Size",
    Default = combatVars.HitboxSize,
    Min = 2,
    Max = 20,
    Rounding = 1,
	Callback = function(Value)
		combatVars.HitboxSize = Value
		if combatVars.HitboxEnabled then
			applyHitboxToAll()
		end
	end,
})

HitboxGroup:AddSlider("HitboxTransparency", {
	Text = "Hitbox Transparency",
    Default = combatVars.HitboxTransparency,
    Min = 0,
    Max = 1,
    Rounding = 1,
	Callback = function(Value)
		combatVars.HitboxTransparency = Value
		if combatVars.HitboxEnabled then
			applyHitboxToAll()
		end
	end,
})

Toggles.HitboxExtender:AddColorPicker("HitboxColor", {
    Default = combatVars.HitboxColor,
    Title = "Hitbox Color",
    Callback = function(Value)
        combatVars.HitboxColor = Value
        if combatVars.HitboxEnabled then
            applyHitboxToAll()
        end
    end,
})

-- ## Auto-Parry ##
local ParryGroup = Tabs.Combat:AddRightGroupbox("Auto-Parry", "shield")
ParryGroup:AddToggle("AutoParry", {
	Text = "Enable Auto-Parry",
	Tooltip = "Automatically parries incoming attacks from enemies.",
	Default = false,
	Risky = true,
	Callback = function(Value)
		combatVars.ParryEnabled = Value
		if Value then
			if conns.ParryCheck then conns.ParryCheck:Disconnect() end
			conns.ParryCheck = RunService.RenderStepped:Connect(function()
				for _, otherChar in ipairs(charsFolder:GetChildren()) do
					if otherChar.Name ~= player.Name and otherChar:FindFirstChild("HumanoidRootPart") then
						local isNearby = (otherChar.HumanoidRootPart.Position - hrp.Position).Magnitude <= 50

						if isNearby and not parryTargets[otherChar] then
                            parryTargets[otherChar] = true -- Mark as a potential target
                            local tool, _ = findTool(otherChar)
                            if tool then
                                -- Listen for when the enemy's weapon creates a hitbox
                                parryTargets[otherChar] = tool.DescendantAdded:Connect(function(child)
                                    if child.Name == "Hitbox" or child.Name == "Damage" then
                                        executeParry(otherChar)
                                    end
                                end)
                            else
                                parryTargets[otherChar] = nil -- No tool, no target
                            end
                        elseif not isNearby and parryTargets[otherChar] then
							removeParryTarget(otherChar)
						end
					end
				end
			end)
		else
			if conns.ParryCheck then
				conns.ParryCheck:Disconnect()
				conns.ParryCheck = nil
			end
            for otherChar, _ in pairs(parryTargets) do
                removeParryTarget(otherChar)
            end
		end
	end,
})
:AddKeyPicker("ParryKeybind", {
    Default = "F",
    Text = "Parry Key",
    ChangedCallback = function(New)
        combatVars.ParryKey = New
    end,
})

ParryGroup:AddToggle("ParryEquip", {
	Text = "Auto-Equip Weapon",
	Tooltip = "Automatically equips your weapon before parrying.",
	Default = false,
	Callback = function(Value)
		combatVars.ParryEquip = Value
	end,
})

ParryGroup:AddSlider("ParryRange", {
	Text = "Parry Range",
    Default = parrySettings.Range,
    Min = 1,
    Max = 50,
    Rounding = 1,
	Callback = function(Value)
		parrySettings.Range = Value
	end,
})

ParryGroup:AddSlider("ParryPrediction", {
	Text = "Movement Prediction",
    Default = parrySettings.Prediction,
    Min = 0,
    Max = 20,
    Rounding = 1,
	Callback = function(Value)
		parrySettings.Prediction = Value
	end,
})

ParryGroup:AddSlider("ParryChance", {
	Text = "Parry Chance (%)",
    Default = parrySettings.Chance,
    Min = 1,
    Max = 100,
    Rounding = 0,
	Callback = function(Value)
		parrySettings.Chance = Value
	end,
})


-- ###################################################################################
-- #
-- #                         UI SETTINGS & EVENT CONNECTIONS
-- #
-- ###################################################################################

-- ## Event Connections ##
conns.CharactersAdded = charsFolder.ChildAdded:Connect(function(otherChar)
    if otherChar.Name ~= player.Name and combatVars.HitboxEnabled then
        task.wait(0.5) -- Wait for character to fully load
        applyHitboxToAll()
    end
end)

conns.CharactersRemoved = charsFolder.ChildRemoved:Connect(function(otherChar)
    removeParryTarget(otherChar)
end)

player.CharacterAdded:Connect(function(newChar)
    char = newChar
    hrp = char:WaitForChild("HumanoidRootPart")
    hum = char:FindFirstChildWhichIsA("Humanoid")
    
    -- Re-apply features on respawn
    task.wait(1)
    if combatVars.HitboxEnabled then
        applyHitboxToAll()
    end
    if combatVars.isAntiRagdollEnabled and gameGc.RagdollTable then
        gameGc.RagdollTable.toggleRagdoll = function() return end
    end
end)


-- ## UI Settings Tab ##
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")
MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "Open Keybind Menu",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})
MenuGroup:AddDropdown("DPIDropdown", {
	Values = { "75%", "100%", "125%", "150%" },
	Default = "100%",
	Text = "UI Scale (DPI)",
	Callback = function(Value)
		Value = Value:gsub("%%", "")
		Library:SetDPIScale(tonumber(Value))
	end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu Bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Toggle Menu" })
MenuGroup:AddButton("Unload", function() Library:Unload() end, {Risky = true})
Library.ToggleKeybind = Options.MenuKeybind

-- Addons Setup
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("Obsidian_Integrated")
SaveManager:SetFolder("Obsidian_Integrated/GameConfigs")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()
