local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Lighting = game:GetService("Lighting")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")
local hum = char:FindFirstChildWhichIsA("Humanoid")
local mouse = player:GetMouse()

local charsFolder = Workspace:WaitForChild("PlayerCharacters", 20)

local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
	Title = "mspaint (整合版)",
	Footer = "version: integrated",
	Icon = 95816097006870,
	NotifySide = "Right",
	ShowCustomCursor = true,
})

local Tabs = {
	Main = Window:AddTab("Main", "user"),
    Combat = Window:AddTab("Combat", "swords"),
	Key = Window:AddKeyTab("Key System"),
	["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}


local combatVars = {
    HitboxEnabled = false,
    HitboxSize = 4,
    HitboxT = 0.7,
    HitboxColor = Color3.fromRGB(255,0,0),

    ParryEnabled = false,
    ParryEquip = false,
    ParryDebug = false,
    ParryKey = Enum.KeyCode.F,

    SawGarbage = false,
}

local parrySettings = {
    Range = 13,
    Prediction = 4,
    Chance = 100,
}

local gameGc = {
    OldRagdoll = nil,
    RagdollTable = nil,
}

local conns = {
    ParryCheck = nil,
    CharactersAdded = nil,
    CharactersRemoved = nil,
}

local parryTargets = {}

local function seeGarbage()
    if combatVars.SawGarbage then return end
    combatVars.SawGarbage = true
    for _, v in ipairs(getgc(true)) do
        if typeof(v) == "table" then
            if rawget(v, "toggleRagdoll") then
                gameGc.OldRagdoll = v.toggleRagdoll
                gameGc.RagdollTable = v
                print("Ragdoll function found.")
            end
        end
    end
end

local function keyPress(key)
    VirtualInputManager:SendKeyEvent(true, key, false, game)
    task.wait()
    VirtualInputManager:SendKeyEvent(false, key, false, game)
end

local function ResizeHitbox(oChar, size, transparency, color)
    local head = oChar:FindFirstChild("Head")
    if not head then return end

    head.Size = size
    head.Transparency = 1
    head.CanCollide = false
    head.Massless = true

    local showHitboxPart = head:FindFirstChild("__ShowHitboxPart")
    if not showHitboxPart then
        showHitboxPart = Instance.new("Part")
        showHitboxPart.Name = "__ShowHitboxPart"
        showHitboxPart.Material = Enum.Material.Neon
        showHitboxPart.Anchored = true -- 防止物理影响
        showHitboxPart.CanCollide = false
        showHitboxPart.Massless = true
        showHitboxPart.Parent = head

        local weld = Instance.new("WeldConstraint") -- 使用 WeldConstraint 更稳定
        weld.Part0 = head
        weld.Part1 = showHitboxPart
        weld.Parent = showHitboxPart
    end

    showHitboxPart.Size = size
    showHitboxPart.Color = color
    showHitboxPart.Transparency = combatVars.HitboxEnabled and transparency or 1
end

local function changeAllHitboxes()
    local size = combatVars.HitboxEnabled and Vector3.new(combatVars.HitboxSize, combatVars.HitboxSize, combatVars.HitboxSize) or Vector3.new(2,1,1)
    local transparency = combatVars.HitboxT
    local color = combatVars.HitboxColor
    
    for _, oChar in ipairs(charsFolder:GetChildren()) do
        if oChar.Name ~= player.Name then
            ResizeHitbox(oChar, size, transparency, color)
        end
    end
end

-- Auto-Parry (自动格挡) 函数
local function deleteParryFromTable(oChar)
    if parryTargets[oChar] then
        if typeof(parryTargets[oChar]) == "RBXScriptConnection" then
            parryTargets[oChar]:Disconnect()
        end
        parryTargets[oChar] = nil
    end
end

local function findTool(oChar)
    local charTool = oChar:FindFirstChildWhichIsA("Tool")
    if charTool and charTool:FindFirstChild("Hitboxes") then
        return charTool, true
    end

    local itemsA = oChar:FindFirstChild("ItemsAttached")
    if itemsA then
        local model = itemsA:FindFirstChildWhichIsA("Model")
        if model and model:FindFirstChildWhichIsA("ObjectValue") then
            return model:FindFirstChildWhichIsA("ObjectValue").Value, false
        end
    end
    return nil, false
end

local function CreateOffsetPart(oChar)
    local oHrp = oChar.HumanoidRootPart
    local humanoid = oChar:FindFirstChild("Humanoid")
    local moveDirection = humanoid.MoveDirection

    if moveDirection.Magnitude == 0 then
        return oHrp.Position
    else
        moveDirection = Vector3.new(moveDirection.X, 0, moveDirection.Z).Unit
        return oHrp.Position + (moveDirection * parrySettings.Prediction)
    end
end

local function Parry(oChar)
    if not (math.random(1, 100) <= parrySettings.Chance) then return end
    
    local offset = CreateOffsetPart(oChar)
    local distPlayersParrys = (offset - hrp.Position).Magnitude

    if tonumber(parrySettings.Range) >= distPlayersParrys then
        if combatVars.ParryEquip then
            local myTool, equipped = findTool(char)
            if not equipped and myTool then
                hum:EquipTool(myTool)
                task.wait(0.1) -- 等待装备动画
            end
        end
        keyPress(combatVars.ParryKey)
    end
end

local PlayerGroup = Tabs.Combat:AddLeftGroupbox("Player", "user-cog")
PlayerGroup:AddToggle("AntiRagdoll", {
	Text = "Anti-Ragdoll",
	Tooltip = "防止你的角色进入布娃娃状态",
	Default = false,
	Callback = function(Value)
		seeGarbage()
		if gameGc.RagdollTable and gameGc.OldRagdoll then
			if Value then
				gameGc.RagdollTable.toggleRagdoll = function() return end
			else
				gameGc.RagdollTable.toggleRagdoll = gameGc.OldRagdoll
			end
		else
			Library:Notify("错误: 未找到 Ragdoll 功能。此功能可能不兼容当前游戏版本。")
		end
	end,
})

-- ## Hitbox Extender ##
local HitboxGroup = Tabs.Combat:AddLeftGroupbox("Hitbox", "expand")
HitboxGroup:AddToggle("HitboxExtender", {
	Text = "Enable Hitbox Extender",
	Tooltip = "增大其他玩家的攻击判定范围",
	Default = false,
	Risky = true,
	Callback = function(Value)
		combatVars.HitboxEnabled = Value
        changeAllHitboxes()
	end,
})

HitboxGroup:AddSlider("HitboxSize", {
	Text = "Hitbox Size",
    Default = combatVars.HitboxSize,
    Min = 2,
    Max = 20,
    Rounding = 1,
	Callback = function(Value)
		combatVars.HitboxSize = Value
		if combatVars.HitboxEnabled then
			changeAllHitboxes()
		end
	end,
})

HitboxGroup:AddSlider("HitboxTransparency", {
	Text = "Hitbox Transparency",
    Default = combatVars.HitboxT,
    Min = 0,
    Max = 1,
    Rounding = 1,
	Callback = function(Value)
		combatVars.HitboxT = Value
		if combatVars.HitboxEnabled then
			changeAllHitboxes()
		end
	end,
})

Toggles.HitboxExtender:AddColorPicker("HitboxColor", {
    Default = combatVars.HitboxColor,
    Title = "Hitbox Color",
    Callback = function(Value)
        combatVars.HitboxColor = Value
        if combatVars.HitboxEnabled then
            changeAllHitboxes()
        end
    end,
})

local ParryGroup = Tabs.Combat:AddRightGroupbox("Auto-Parry", "shield")
ParryGroup:AddToggle("AutoParry", {
	Text = "Enable Auto-Parry",
	Tooltip = "自动格挡来自敌人的攻击",
	Default = false,
	Risky = true,
	Callback = function(Value)
		combatVars.ParryEnabled = Value
		if Value then
			if conns.ParryCheck then conns.ParryCheck:Disconnect() end
			conns.ParryCheck = RunService.RenderStepped:Connect(function()
				for _, oChar in ipairs(charsFolder:GetChildren()) do
					if oChar.Name ~= player.Name and oChar:FindFirstChild("HumanoidRootPart") then
						local oHrp = oChar.HumanoidRootPart
						local isNearby = (oHrp.Position - hrp.Position).Magnitude <= 50

						if isNearby and not parryTargets[oChar] then
                            parryTargets[oChar] = true
                            local tool, _ = findTool(oChar)
                            if tool then
                                parryTargets[oChar] = tool.DescendantAdded:Connect(function(child)
                                    if child.Name == "Hitbox" or child.Name == "Damage" then
                                        Parry(oChar)
                                    end
                                end)
                            else
                                parryTargets[oChar] = nil
                            end
                        elseif not isNearby and parryTargets[oChar] then
							deleteParryFromTable(oChar)
						end
					end
				end
			end)
		else
			if conns.ParryCheck then
				conns.ParryCheck:Disconnect()
				conns.ParryCheck = nil
			end
            for oChar, _ in pairs(parryTargets) do
                deleteParryFromTable(oChar)
            end
		end
	end,
})
:AddKeyPicker("ParryKeybind", {
    Default = "F",
    Text = "Parry Key",
    ChangedCallback = function(New)
        combatVars.ParryKey = New
    end,
})

ParryGroup:AddToggle("ParryEquip", {
	Text = "Auto-Equip Weapon",
	Tooltip = "在格挡前自动装备武器",
	Default = false,
	Callback = function(Value)
		combatVars.ParryEquip = Value
	end,
})

ParryGroup:AddSlider("ParryRange", {
	Text = "Parry Range",
    Default = parrySettings.Range,
    Min = 1,
    Max = 50,
    Rounding = 1,
	Callback = function(Value)
		parrySettings.Range = Value
	end,
})

ParryGroup:AddSlider("ParryPrediction", {
	Text = "Movement Prediction",
    Default = parrySettings.Prediction,
    Min = 0,
    Max = 20,
    Rounding = 1,
	Callback = function(Value)
		parrySettings.Prediction = Value
	end,
})

ParryGroup:AddSlider("ParryChance", {
	Text = "Parry Chance (%)",
    Default = parrySettings.Chance,
    Min = 1,
    Max = 100,
    Rounding = 0,
	Callback = function(Value)
		parrySettings.Chance = Value
	end,
})

conns.CharactersAdded = charsFolder.ChildAdded:Connect(function(oChar)
    if oChar.Name ~= player.Name and combatVars.HitboxEnabled then
        task.wait(0.5)
        ResizeHitbox(oChar, Vector3.new(combatVars.HitboxSize,combatVars.HitboxSize,combatVars.HitboxSize), combatVars.HitboxT, combatVars.HitboxColor)
    end
end)

conns.CharactersRemoved = charsFolder.ChildRemoved:Connect(function(oChar)
    deleteParryFromTable(oChar)
end)

player.CharacterAdded:Connect(function(newChar)
    char = newChar
    hrp = char:WaitForChild("HumanoidRootPart")
    hum = char:FindFirstChildWhichIsA("Humanoid")
    -- 在角色重生后重新应用功能 (如果需要)
    task.wait(1)
    if combatVars.HitboxEnabled then
        changeAllHitboxes()
    end
end)

local LeftGroupBox = Tabs.Main:AddLeftGroupbox("Groupbox", "boxes")

LeftGroupBox:AddToggle("MyToggle", {
	Text = "This is a toggle",
	Tooltip = "This is a tooltip",
	Default = true,
})

LeftGroupBox:AddCheckbox("MyCheckbox", {
	Text = "This is a checkbox",
	Default = true,
})

local MyButton = LeftGroupBox:AddButton({
	Text = "Button",
	Func = function()
		print("You clicked a button!")
	end,
})

LeftGroupBox:AddLabel("This is a label")
LeftGroupBox:AddDivider()

LeftGroupBox:AddSlider("MySlider", {
	Text = "This is my slider!",
	Default = 0,
	Min = 0,
	Max = 5,
	Rounding = 1,
})

LeftGroupBox:AddInput("MyTextbox", {
	Default = "My textbox!",
	Text = "This is a textbox",
	Placeholder = "Placeholder text",
})

local DropdownGroupBox = Tabs.Main:AddRightGroupbox("Dropdowns")

DropdownGroupBox:AddDropdown("MyDropdown", {
	Values = { "This", "is", "a", "dropdown" },
	Default = 1,
	Text = "A dropdown",
})

LeftGroupBox:AddLabel("Keybind"):AddKeyPicker("KeyPicker", {
	Default = "MB2",
	Mode = "Toggle",
	Text = "Auto lockpick safes",
})

-- UI Settings
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")
MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "Open Keybind Menu",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})
MenuGroup:AddDropdown("DPIDropdown", {
	Values = { "50%", "75%", "100%", "125%", "150%" },
	Default = "100%",
	Text = "DPI Scale",
	Callback = function(Value)
		Value = Value:gsub("%%", "")
		Library:SetDPIScale(tonumber(Value))
	end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })
MenuGroup:AddButton("Unload", function() Library:Unload() end)
Library.ToggleKeybind = Options.MenuKeybind

-- Addons
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()
