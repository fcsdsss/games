loadstring(game:HttpGet("https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua", true))()

loadstring(game:HttpGet("https://raw.githubusercontent.com/fcsdsss/games/refs/heads/main/kickbypass"))()

local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles
local LocalPlayer = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local Window = Library:CreateWindow({
	Title = "杀戮光环",
	Footer = "测试版",
	ShowCustomCursor = true,
})

local Tabs = {
	Main = Window:AddTab("主页", "sword"),
	["UI Settings"] = Window:AddTab("UI设置", "settings"),
}

local ControlsGroup = Tabs.Main:AddLeftGroupbox("控制")

ControlsGroup:AddToggle("AuraEnabled", {
	Text = "启用光环",
	Default = false,
})

ControlsGroup:AddToggle("TeamCheck", {
	Text = "队伍检测",
	Default = true,
})

ControlsGroup:AddToggle("IgnoreWalls", {
    Text = "无视墙体",
    Default = true,
})

ControlsGroup:AddToggle("MultiAura", {
    Text = "同时攻击多人",
    Default = false,
})

ControlsGroup:AddToggle("VisualizeRange", {
    Text = "范围可视化",
    Default = false,
})

ControlsGroup:AddSlider("Range", {
	Text = "范围",
	Default = 25,
	Min = 5,
	Max = 2000,
	Rounding = 0,
})

ControlsGroup:AddSlider("Delay", {
	Text = "攻击延迟",
    Suffix = "毫秒",
	Default = 2,
	Min = 0.001,
	Max = 1000,
	Rounding = 0,
})

ControlsGroup:AddSlider("MaxTargets", {
    Text = "最大目标数",
    Default = 3,
    Min = 1,
    Max = 9e999999,
    Rounding = 0,
    Compact = true,
})

local TargetGroup = Tabs.Main:AddRightGroupbox("目标选择")

TargetGroup:AddDropdown("TargetMode", {
    Text = "目标优先级",
    Values = { "最近距离", "最低血量" },
    Default = "最近距离",
    Multi = false,
})

local function Attack(TargetPlayer)
    pcall(function()
        local Event = game:GetService("ReplicatedStorage"):FindFirstChild("ByteNetReliable")
        local Weapon = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
        local TargetRootPart = TargetPlayer.Character and TargetPlayer.Character:FindFirstChild("HumanoidRootPart")

        if not Event or not Weapon or not TargetRootPart then return end

        Event:FireServer(
            (function(bytes)
                local b = buffer.create(#bytes)
                for i = 1, #bytes do
                    buffer.writeu8(b, i - 1, bytes[i])
                end
                return b
            end)({ 45, 8, 0, 72, 117, 109, 97, 110, 111, 105, 100, 1, 0, 0, 0, 0, 70, 28, 6, 208, 0, 0, 0, 0, 2, 88, 163, 167, 81, 88, 163, 167, 81, 88, 163, 167, 81 }),
            {
                TargetRootPart,
                Weapon
            }
        )
    end)
end

local function GetTargets()
    local PotentialTargets = {}
    local LocalCharacter = LocalPlayer.Character
    if not (LocalCharacter and LocalCharacter.PrimaryPart) then return {} end

    local LocalRootPos = LocalCharacter.PrimaryPart.Position
    local RaycastParams = RaycastParams.new()
    RaycastParams.FilterType = Enum.RaycastFilterType.Exclude
    RaycastParams.FilterDescendantsInstances = {LocalCharacter}

    for _, Player in ipairs(game:GetService("Players"):GetPlayers()) do
        if Player ~= LocalPlayer and Player.Character and Player.Character.PrimaryPart and Player.Character:FindFirstChildOfClass("Humanoid") then
            local Character = Player.Character
            local Humanoid = Character:FindFirstChildOfClass("Humanoid")

            if Humanoid.Health > 0 then
                if not (Toggles.TeamCheck.Value and Player.Team and Player.Team == LocalPlayer.Team) then
                    local TargetPos = Character.PrimaryPart.Position
                    local Distance = (LocalRootPos - TargetPos).Magnitude

                    if Distance <= Options.Range.Value then
                        if Toggles.IgnoreWalls.Value then
                            table.insert(PotentialTargets, {Player = Player, Distance = Distance, Health = Humanoid.Health})
                        else
                            local Result = Workspace:Raycast(LocalRootPos, (TargetPos - LocalRootPos).Unit * Distance, RaycastParams)
                            if not Result or (Result and Result.Instance:IsDescendantOf(Character)) then
                                table.insert(PotentialTargets, {Player = Player, Distance = Distance, Health = Humanoid.Health})
                            end
                        end
                    end
                end
            end
        end
    end

    if #PotentialTargets == 0 then return {} end

    if Options.TargetMode.Value == "最近距离" then
        table.sort(PotentialTargets, function(a, b)
            return a.Distance < b.Distance
        end)
    elseif Options.TargetMode.Value == "最低血量" then
        table.sort(PotentialTargets, function(a, b)
            return a.Health < b.Health
        end)
    end
    
    local FinalTargets = {}
    local Max = Toggles.MultiAura.Value and Options.MaxTargets.Value or 1
    for i = 1, math.min(Max, #PotentialTargets) do
        table.insert(FinalTargets, PotentialTargets[i].Player)
    end

    return FinalTargets
end

task.spawn(function()
    while task.wait() do
        if Library.Unloaded then break end
        if Toggles.AuraEnabled.Value then
            local Targets = GetTargets()
            if #Targets > 0 then
                for _, Target in ipairs(Targets) do
                    Attack(Target)
                end
            end
            task.wait(Options.Delay.Value / 1000)
        end
    end
end)

local RangeVisualizer = Instance.new("Part")
RangeVisualizer.Name = "RangeVisualizer"
RangeVisualizer.Anchored = true
RangeVisualizer.CanCollide = false
RangeVisualizer.TopSurface = Enum.SurfaceType.Smooth
RangeVisualizer.BottomSurface = Enum.SurfaceType.Smooth
RangeVisualizer.Transparency = 0.6
RangeVisualizer.Material = Enum.Material.ForceField
RangeVisualizer.Color = Color3.fromRGB(255, 50, 50)
local Mesh = Instance.new("CylinderMesh", RangeVisualizer)

local function UpdateVisualizer()
    if Toggles.VisualizeRange.Value and LocalPlayer.Character and LocalPlayer.Character.PrimaryPart then
        RangeVisualizer.Parent = Workspace
        local Range = Options.Range.Value
        Mesh.Scale = Vector3.new(Range * 2, 0.1, Range * 2)
        RangeVisualizer.CFrame = CFrame.new(LocalPlayer.Character.PrimaryPart.Position)
    else
        RangeVisualizer.Parent = nil
    end
end

Toggles.VisualizeRange:OnChanged(UpdateVisualizer)
Options.Range:OnChanged(UpdateVisualizer)
RunService.RenderStepped:Connect(function()
    if Toggles.VisualizeRange.Value and RangeVisualizer.Parent == Workspace then
        if LocalPlayer.Character and LocalPlayer.Character.PrimaryPart then
            RangeVisualizer.CFrame = CFrame.new(LocalPlayer.Character.PrimaryPart.Position)
        else
            RangeVisualizer.Parent = nil
        end
    end
end)

local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("菜单")
MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "打开按键绑定菜单",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})
MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "自定义光标",
	Default = true,
	Callback = function(Value)
		Library.ShowCustomCursor = Value
	end,
})
MenuGroup:AddDropdown("NotificationSide", {
	Values = { "左侧", "右侧" },
	Default = "右侧",
	Text = "通知位置",
	Callback = function(Value)
        if Value == "左侧" then
		    Library:SetNotifySide("Left")
        else
            Library:SetNotifySide("Right")
        end
	end,
})
MenuGroup:AddDropdown("DPIDropdown", {
	Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
	Default = "100%",
	Text = "界面缩放",
	Callback = function(Value)
		Value = Value:gsub("%%", "")
		local DPI = tonumber(Value)
		Library:SetDPIScale(DPI)
	end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("菜单绑定"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "菜单按键" })
MenuGroup:AddButton("卸载", function()
	Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("Aura")
SaveManager:SetFolder("Aura/game")
SaveManager:BuildConfigSection(Tabs["UI Settings"])
ThemeManager:ApplyToTab(Tabs["UI Settings"])

Library:OnUnload(function()
    if RangeVisualizer and RangeVisualizer.Parent then
        RangeVisualizer:Destroy()
    end
end)

SaveManager:LoadAutoloadConfig()
